openapi: 3.0.3

info:
  title: Account Management API
  description: API for managing user accounts and subscriptions
  version: v1.0.0
  contact:
    name: Account Management Team
    email: support@accountmanagement.app
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: User Management
    description: API for managing users
  - name: Subscription Management
    description: API for managing user subscriptions

paths:

  /users:
    post:
      tags:
        - User Management
      summary: Create a new user
      description: Creates a new user with the provided information
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid input data

  /users/{id}:
    get:
      tags:
        - User Management
      summary: Get a user by ID
      description: Returns a user based on the provided ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
    put:
      tags:
        - User Management
      summary: Update a user
      description: Updates a user with the provided information
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
        '400':
          description: Invalid input data
    delete:
      tags:
        - User Management
      summary: Delete a user
      description: Deletes a user with the specified ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

  /users/{id}/subscriptions:
    post:
      tags:
        - Subscription Management
      summary: Add a subscription for a user
      description: Creates a new subscription for the specified user
      operationId: addSubscription
      parameters:
        - name: id
          in: path
          description: ID of the user to add subscription for
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionDto'
      responses:
        '201':
          description: Subscription created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionDto'
        '400':
          description: Invalid input data
        '404':
          description: User not found

    get:
      tags:
        - Subscription Management
      summary: Get user subscriptions
      description: Returns all subscriptions for the specified user
      operationId: getUserSubscriptions
      parameters:
        - name: id
          in: path
          description: ID of the user to get subscriptions for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of user subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionDto'
        '404':
          description: User not found

  /users/{id}/subscriptions/{sub_id}:
    delete:
      tags:
        - Subscription Management
      summary: Delete a subscription
      description: Deletes a subscription with the specified ID for the specified user
      operationId: deleteSubscription
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
            format: uuid
        - name: sub_id
          in: path
          description: ID of the subscription to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Subscription deleted successfully
        '404':
          description: User or subscription not found

  /subscriptions/top:
    get:
      tags:
        - Subscription Management
      summary: Get top popular subscriptions
      description: Returns the top 3 most popular subscriptions
      operationId: getTopSubscriptions
      responses:
        '200':
          description: List of top subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionDto'

components:
  schemas:

    UserDto:
      type: object
      required:
        - username
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          description: Unique username for the user
          example: "john.doe"

    SubscriptionDto:
      type: object
      required:
        - serviceId
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        serviceId:
          type: string
          format: uuid
        price:
          type: number
          format: double
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PENDING, CANCELLED]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time

    ServiceDto:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Name of the service
          example: "Premium Subscription"
